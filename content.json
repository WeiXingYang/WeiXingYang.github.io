[{"title":"微服务（一）","date":"2019-11-27T14:36:00.000Z","path":"2019/11/27/微服务（一）/","text":"微服务起源 微服务是由 Peter Rodgers 博士于 2005 年度云计算博览会提出的微 Web 服务 (Micro-Web-Service) 开始，Juval Löwy 则是与他有类似的前导想法，将类别变成细粒服务 (granular services)，以作为 Microsoft 下一阶段的软件架构，其核心想法是让服务是由类似 Unix 管道的访问方式使用，而且复杂的服务背后是使用简单 URI 来开放接口，任何服务，任何细粒都能被开放 (exposed)。这个设计在 HP 的实验室被实现，具有改变复杂软件系统的强大力量。 2014年，Martin Fowler 与 James Lewis 共同提出了微服务的概念，定义了微服务是由以单一应用程序构成的小服务，自己拥有自己的行程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用 HTTP API 通信。同时服务会使用最小的规模的集中管理 (例如 Docker) 能力，服务可以用不同的编程语言与数据库等组件实现[1]。 什么是微服务？ The term “Microservice Architecture“ has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services. While there is no precise definition of this architectural style, there are certain common characteristics around organization around business capability, automated deployment, intelligence in the endpoints, and decentralized control of languages and data. “微服务体系结构”这个术语在过去几年中迅速出现，用来描述一种特殊的方法，将软件应用程序设计为可独立部署的服务套件。 虽然这种架构风格没有精确的定义，但是围绕着业务能力、自动部署、端点智能以及语言和数据的分散控制，围绕着组织有一些共同的特征。 ​ – Martin Fowler Microservice 微服务 (Microservices) 是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关 (Language-Independent/Language agnostic) 的 API 集相互通信。 ​ – 维基百科（中文） Microservices are a software development technique —a variant of the service-oriented architecture (SOA) structural style— that arranges an application as a collection of loosely coupled services.[1] In a microservices architecture, services are fine-grained and the protocols are lightweight. 微服务是一种软件开发技术—- 是面向服务的体系结构结构风格的变体—- 将应用程序排列成松散耦合服务的集合。 在微服务体系结构中，服务是细粒度的，协议是轻量级的。 ​ – 维基百科 简而言之，微服务体系结构风格[1]是一种将单个应用程序开发成一套小型服务的方法，每个应用程序都在自己的进程中运行，并与轻量级机制(通常是 HTTP 资源 API)通信。 这些服务是围绕业务能力构建的，可以通过完全自动化的部署机制独立部署。 这些服务只有最低限度的集中管理，可以用不同的编程语言编写，并使用不同的数据存储技术。 微服务体系结构的特点 Characteristics of a Microservice Architecture 通过服务实现组件化 Componentization via Services 围绕业务能力组织 Organized around Business Capabilities 产品而非项目 Products not Projects 智能端点和哑管道 Smart endpoints and dumb pipes 分权治理 Decentralized Governance 分散式数据管理 Decentralized Data Management 基础设施自动化 Infrastructure Automation 为失败而设计 Design for failure 进化设计 Evolutionary Design 微服务的优点第一，它解决了复杂问题。它把可能会变得庞大的单体应用程序分解成一套服务。虽然功能数量不变，但是应用程序已经被分解成可管理的块或者服务。每个服务都有一个明确定义边界的方式，如远程过程调用（RPC）驱动或消息驱动 API。微服务架构模式强制一定程度的模块化，实际上，使用单体代码来实现是极其困难的。因此，使用微服务架构模式，个体服务能被更快地开发，并更容易理解与维护。 第二，这种架构使得每个服务都可以由一个团队独立专注开发。开发者可以自由选择任何符合服务 API 契约的技术。当然，更多的组织是希望通过技术选型限制来避免完全混乱的状态。然而，这种自由意味着开发人员不再有可能在这种自由的新项目开始时使用过时的技术。当编写一个新服务时，他们可以选择当前的技术。此外，由于服务较小，使用当前技术重写旧服务将变得更加可行。 第三，微服务架构模式可以实现每个微服务独立部署。开发人员根本不需要去协调部署本地变更到服务。这些变更一经测试即可立即部署。比如，UI 团队可以执行 A|B 测试，并快速迭代 UI 变更。微服务架构模式使得持续部署成为可能。 最后，微服务架构模式使得每个服务能够独立扩展。您可以仅部署满足每个服务的容量和可用性约束的实例数目。此外，您可以使用与服务资源要求最匹配的硬件。例如，您可以在 ECS Compute Optimized 实例上部署一个 CPU 密集型图像处理服务，并且在 ECS Memory-optimized 实例上部署一个内存数据库服务。 微服务的缺点第一，微服务是一个分布式系统，其使得整体变得复杂。开发者需要选择和实现基于消息或者 RPC 的进程间通信机制。此外，由于目标请求可能很慢或者不可用，他们必须要编写代码来处理局部故障。虽然这些并不是很复杂、高深，但模块间通过语言级方法/过程调用相互调用，这比单体应用要复杂得多。 第二，分区数据库架构。在基于微服务的应用程序中，您需要更新不同服务所用的数据库。通常不会选择分布式事务，不仅仅是因为 CAP 定理。他们根本不支持如今高度可扩展的 NoSQL 数据库和消息代理。您最后不得不使用基于最终一致性的方法，这对于开发人员来说更具挑战性。 第三，微服务测试应用程序也很复杂。对于微服务来说需要启动该服务及其所依赖的所有服务，或者至少为这些服务配置存根。 第四，实现了跨越多服务变更。例如，我们假设您正在实现一个变更服务 A、服务 B 和 服务 C 的需求，其中 A 依赖于 B，且 B 依赖于 C。在单体应用程序中，您可以简单地修改相应的模块、整合变更并一次性部署他们。相反，在微服务中您需要仔细规划和协调出现的变更至每个服务。例如，您需要更新服务 C，然后更新服务 B，最后更新服务 A。幸运的是，大多数变更只会影响一个服务，需要协调的多服务变更相对较少。 第五，基于微服务应用程序的部署也是相当复杂。微服务应用程序通常由大量的服务组成。要成功部署微服务应用程序，需要求开发人员能高度控制部署方式和高度自动化。 小结微服务是将单一的应用程序拆分成多个微小的服务，各个小服务之间松耦合、高内聚，每个小服务可以单独进行开发，不依赖于具体的编程语言，也可以使用不同的数据存储技术，各个服务可以独立部署，拥有各自的进程，相互之间通过轻量化的机制进行通信（如基于http的API接口），所有的服务共同实现具体的业务功能。 微服务架构是一种思想，而真正开发时是采用分布式系统开发。 微服务的目标在于充分分解应用程序以方便应用敏捷开发和部署。 微服务的实现思路是将应用程序分解成一套较小的互联服务。 微服务通常要实现三大指标： 高可用 高性能 高并发 微服务通常面临的问题： 客户端如何访问 API Gateway 、 WebUI 服务与服务之间如何通信（对内RPC，对外RESTFUL） 同步： HTTP：跨防火墙 RPC：传输效率高 异步 消息队列 服务如何治理 注册中心 监控中心 服务挂了怎么办 重试机制 限流 熔断机制 负载均衡 降级 本地缓存 构建复杂的微服务应用程序本质上是困难的。单体架构模式只适用于简单、轻量级的应用程序，如果您使用它来构建复杂应用，您最终会陷入痛苦的境地。微服务架构模式是复杂、持续发展应用的一个更好的选择。尽管它存在着缺点和实现挑战。 参考书籍 《Microservices Patterns》 文献参考 Microservices：https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa Martin Fowler：https://martinfowler.com/ James Lewis：https://bovon.org/ 维基百科（中文）：https://zh.wikipedia.org/wiki/微服務 维基百科：https://en.wikipedia.org/wiki/Microservices ChangeLog2019-11-27 22:26","link":"","tags":[{"name":"微服务","slug":"微服务","permalink":"https://weixingyang.github.io/tags/微服务/"}]},{"title":"gulp-babel 取消严格模式(\"use strict\")","date":"2019-07-23T01:38:00.000Z","path":"2019/07/23/gulp-babel取消严格模式use strict/","text":"插件地址 ➡️ https://github.com/genify/babel-plugin-transform-remove-strict-mode 1、安装1npm install babel-plugin-transform-remove-strict-mode 2、使用 添加内容到.babelrc文件 123&#123; \"plugins\": [\"transform-remove-strict-mode\"]&#125; 重新执行打包命令即可","link":"","tags":[{"name":"日记本","slug":"日记本","permalink":"https://weixingyang.github.io/tags/日记本/"}]},{"title":"Git分支的创建、删除、切换","date":"2019-07-01T02:06:00.000Z","path":"2019/07/01/Git分支的创建、删除、切换/","text":"1、本地创建新分支并切换到新分支1# git checkout -b 分支名 2、提交分支到远程仓库1# git push origin 分支名 3、切换分支1# git checkout 分支名 4、删除远程分支1# git push origin --delete 分支名 5、删除本地分支1# git branch -D 分支名 Tips：其他分支命令 查看当前分支 git branch 查看所属分支 git branch -a","link":"","tags":[{"name":"日记本","slug":"日记本","permalink":"https://weixingyang.github.io/tags/日记本/"}]},{"title":"Git彻底删除历史提交记录的方法","date":"2019-06-05T02:22:00.000Z","path":"2019/06/05/Git彻底删除历史提交记录的方法/","text":"1、查看Git提交记录1# git log 2、找到需要回滚到的提交点，复制它的hash值 1# git reset --hard 你复制的hash值 3、将当前指向的head推到git1# git push --force","link":"","tags":[{"name":"日记本","slug":"日记本","permalink":"https://weixingyang.github.io/tags/日记本/"}]},{"title":"玩转MySQL优化命令","date":"2019-05-06T10:05:00.000Z","path":"2019/05/06/玩转MySQL优化命令/","text":"1、MySQL更改为只能本地登录123# use mysql;# select user,host,Password from user where user='root';# delete from user where user='root' and host='%'; 2、MySQL授予外网登陆权限grant all privileges on *.* to 授予外网登陆的用户名@&#39;%&#39; identified by &#39;密码&#39; WITH GRANT OPTION; 12# grant all privileges on *.* to root@'%' identified by 'root' WITH GRANT OPTION;# flush privileges; 3、更改MySQL的存储目录","link":"","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://weixingyang.github.io/tags/MySQL/"}]},{"title":"IDEA设置后端代码开发规范","date":"2019-01-23T02:33:00.000Z","path":"2019/01/23/IDEA设置后端代码开发规范/","text":"1、IDEA 配置svn提交svn报错： 1.1、下载：https://www.visualsvn.com/downloads/ 1.2、修改IDEA配置指向的路径2、IDEA 设置 Tab 键为 4 个空格Scheme 选择 Project ,在下面把取消勾选 Use tab character 3、IDEA 设置编码格式为 UTF-8 4、IDEA 设置换行符为 Unix 编码格式 5、IDEA 设置类注释模板 1234/** * * @author Created by 思伟 on $&#123;DATE&#125; */","link":"","tags":[{"name":"日记本","slug":"日记本","permalink":"https://weixingyang.github.io/tags/日记本/"}]},{"title":"Linux配置SSH Key到GitHub","date":"2018-12-17T06:48:40.000Z","path":"2018/12/17/Linux配置SSH-Key到GitHub/","text":"1、生成SSH Key首先检查下本机是否已经安装了SSH，在终端输入ssh即可： 如果没有安装进行yum安装 1# yum -y install openssh-clients 接下来就是生成ssh key了，输入ssh-keygen -t rsa，然后连续按回车键三次（注意：千万不要输入密码！）。 id_rsa.pub为公钥，id_rsa为私钥，它们都是隐藏文件。那么如何查看它们的内容呢？只需要继续执行以下两条命令即可。 12# cd .ssh/# cat id_rsa.pub 2、添加SSH Key到GitHub上 接着执行下面操作： 点击New SSH Key按钮后进行Key的填写操作，完成SSH Key的添加。如下图： 添加SSH Key成功之后，继续输入命令进行测试。 1# ssh -T git@github.com 出现上图结果则说明添加SSH Key成功。","link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"https://weixingyang.github.io/tags/Linux/"}]},{"title":"SpringBoot 2.0 更新记录","date":"2018-08-21T02:43:00.000Z","path":"2018/08/21/SpringBoot 2.0 更新记录/","text":"1、Spring Boot 2.0 要求Java 版本必须8以上2、配置属性的重定位 Old property New property server.context-path server.servlet.context-path server.context-parameters.* server.servlet.context-parameters.* server.jsp.class-name server.servlet.jsp.class-name server.jsp.init-parameters.* server.servlet.jsp.init-parameters.* server.jsp.registered server.servlet.jsp.registered server.servlet-path server.servlet.path","link":"","tags":[{"name":"Java","slug":"Java","permalink":"https://weixingyang.github.io/tags/Java/"}]},{"title":"Linux下更改MySQL的存储目录","date":"2018-08-06T09:06:00.000Z","path":"2018/08/06/Linux下更改MySQL的存储目录/","text":"重要步骤：一定要先停止Mysql1# service mysqld stop 1、创建目标文件夹12# mkdir -p /data/mysql# chown -R mysql.mysql /data/mysql/ 2、迁移命令1# mysql_install_db --user=mysql --basedir=/usr --datadir=/data/mysql 3、为避免麻烦，删掉原文件夹/var/lib/mysql1# rm -rf /var/lib/mysql/* 4、修改/etc/my.cnf配置文件12[mysqld]datadir=/data/mysql 5、启动mysql12# chkconfig mysqld on# service mysqld restart","link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"https://weixingyang.github.io/tags/Linux/"}]},{"title":"SpringBoot设置默认首页","date":"2018-04-26T07:49:00.000Z","path":"2018/04/26/SpringBoot设置默认首页/","text":"1234567891011@Configurationpublic class DefaultView extends WebMvcConfigurerAdapter&#123; @Override public void addViewControllers(ViewControllerRegistry registry) &#123; super.addViewControllers(registry); //主页 registry.addViewController(\"/\").setViewName(\"forward:/index\"); &#125; &#125;","link":"","tags":[{"name":"Java","slug":"Java","permalink":"https://weixingyang.github.io/tags/Java/"}]},{"title":"关于npm install失败的解决方法","date":"2018-04-20T08:30:00.000Z","path":"2018/04/20/关于npm install失败的解决方法/","text":"可以尝试以下解决方案 1.授权执行1sudo npm install 2.运行高权限用户1sudo npm install --unsafe-perm 3.安装某个模块1sudo npm i 模块名 --unsafe-perms 4.清除代理1npm config set proxy false 5.清除缓存1npm cache clean","link":"","tags":[{"name":"日记本","slug":"日记本","permalink":"https://weixingyang.github.io/tags/日记本/"}]},{"title":"vi/vim 粘贴内容时,保留原文件内容格式","date":"2018-04-20T07:50:00.000Z","path":"2018/04/20/vi或vim粘贴内容时,保留原文件内容格式/","text":"在vi/vim普通模式下执行:set paste命令，再按 i 插入就会保留原文件格式 :set paste 打开粘贴命令 :set nopaste 关闭命令 :h paste 帮助","link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"https://weixingyang.github.io/tags/Linux/"}]},{"title":"Linux或Win下安装node和npm","date":"2018-04-20T07:31:00.000Z","path":"2018/04/20/Linux或Win下安装node和npm/","text":"一、离线安装Node 官网下载链接：https://nodejs.org/zh-cn/download/node和npm对应关系：https://nodejs.org/zh-cn/download/releases/ 解压目录 1234# cd /usr/local# yum install -y xz# xz -d node-v8.11.1-linux-x64.tar.xz# tar -xf node-v8.11.1-linux-x64.tar 这里想要全局使用npm 和 node,就需要做相关软链，如下！ 123# cd /usr/local/bin# ln -s /usr/local/src/node-v8.10.0-linux-x64/bin/npm# ln -s /usr/local/src/node-v8.10.0-linux-x64/bin/node 然后即可在任意位置执行 node -v npm -v 查看相应的版本，则安装完成！ 二、yum安装node和npm(Linux快速安装)12# yum install epel-release -y# yum install nodejs -y 三、使用淘宝镜像站(建议跳过此步骤，不建议使用)1234# npm config get registry // https://registry.npmjs.org/# npm config set registry https://registry.npm.taobao.org---- 验证是否配置成功# npm config get registry 四、指定全局安装路径和缓存路径(看自己选择是否使用) 设置全局模块的安装路径到 node_global 文件夹，设置缓存到 node_cache 文件夹 12345# npm config set prefix D:\\nodejs\\node_global# npm config set cache D:\\nodejs\\node_cache---- 验证是否配置成功# npm config get cache# npm ls -g 五、安装 cnpm(看自己选择是否使用)12# npm install cnpm -g --registry=https://registry.npm.taobao.org# cnpm -v Tips: npm默认的全局目录可执行命令查看1# npm config ls","link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"https://weixingyang.github.io/tags/Linux/"}]},{"title":"Linux下安装Git","date":"2018-04-17T05:41:00.000Z","path":"2018/04/17/Linux下安装Git/","text":"1、使用yum安装12# yum -y install git# yum remove git 2、源代码安装 1234567891011121314151617---安装依赖的包# yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker zlib# cd /usr/local----下载git源码# wget https://github.com/git/git/archive/v2.21.0.tar.gz----解压git源码# tar -zxvf v2.21.0.tar.gz# cd git-2.21.0/# mkdir /usr/local/git----编译安装到指定目录# make prefix=/usr/local/git all# sudo make prefix=/usr/local/git install# vim /etc/profile----添加在文件的最后一行export PATH=/usr/local/git/bin:$PATH# source /etc/profile# git --version 3、FAQ1、 如果解压时出现报错，建议手动下载git源码包然后上传到服务器1234gzip: stdin: unexpected end of filetar: Unexpected EOF in archivetar: Unexpected EOF in archivetar: Error is not recoverable: exiting now","link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"https://weixingyang.github.io/tags/Linux/"}]}]