<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卫星君-遇见智我</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weixingyang.github.io/"/>
  <updated>2019-12-09T13:16:48.784Z</updated>
  <id>https://weixingyang.github.io/</id>
  
  <author>
    <name>卫星君-遇见智我</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微服务 之 技术栈</title>
    <link href="https://weixingyang.github.io/2019/12/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%20%E4%B9%8B%20%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    <id>https://weixingyang.github.io/2019/12/09/微服务 之 技术栈/</id>
    <published>2019-12-09T13:00:00.000Z</published>
    <updated>2019-12-09T13:16:48.784Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-微服务开发"><a href="#1-微服务开发" class="headerlink" title="1.微服务开发"></a>1.微服务开发</h3><blockquote><p>作用: 快速构建开发服务.</p></blockquote><a id="more"></a><h5 id="Spring："><a href="#Spring：" class="headerlink" title="Spring："></a>Spring：</h5><ul><li><a href="https://spring.io/" target="_blank" rel="noopener">官网</a><h5 id="SpringMvc"><a href="#SpringMvc" class="headerlink" title="SpringMvc"></a>SpringMvc</h5><h5 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h5></li><li><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">官网</a><blockquote><p>Spring 是目前 JavaWeb 开发人员必不可少的一个框架, SpringBoot 简化了 Spring 开发的配置目前也是业内主流开发框架.</p></blockquote></li></ul><h3 id="2-微服务注册发现"><a href="#2-微服务注册发现" class="headerlink" title="2.微服务注册发现"></a>2.微服务注册发现</h3><blockquote><p>作用: 发现服务,注册服务,集中管理服务.</p></blockquote><h5 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h5><blockquote><p>ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.<br>zookeeper是一个集中的服务,用于维护配置信息、命名、提供分布式同步和提供组服务.</p></blockquote><ul><li><a href="https://github.com/apache/zookeeper" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h5><ul><li>Eureka Server : 提供服务注册服务,各个节点启动后,会在Eureka Server中进行注册.</li><li>Eureka Client : 简化与Eureka Server的交互操作.</li><li>Spring Cloud Netflix : GitHub，文档.</li></ul><h5 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h5><blockquote><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。<br>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p></blockquote><ul><li><a href="https://nacos.io/zh-cn/" target="_blank" rel="noopener">官网</a></li><li><a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">GitHub</a></li></ul><blockquote><p>Zookeeper保证CP , Eureka 保证AP。<br>APC定理，C-数据一致性;A-服务可用性;P-服务对网络分区故障的容错性,这三个特性在任何分布式系统中不能同时满足,最多同时满足两个.</p></blockquote><h3 id="3-微服务配置管理"><a href="#3-微服务配置管理" class="headerlink" title="3.微服务配置管理"></a>3.微服务配置管理</h3><blockquote><p>作用:统一管理一个或多个服务的配置信息,集中管理.</p></blockquote><h5 id="Disconf"><a href="#Disconf" class="headerlink" title="Disconf"></a>Disconf</h5><blockquote><p>Distributed Configuration Management Platform(分布式配置管理平台) ,它是专注于各种分布式系统配置管理 的通用组件/通用平台, 提供统一的配置管理服务,是一套完整的基于zookeeper的分布式配置统一解决方案.</p></blockquote><ul><li><a href="https://github.com/knightliao/disconf" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h5><ul><li><a href="https://github.com/spring-cloud/spring-cloud-config" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Apollo"><a href="#Apollo" class="headerlink" title="Apollo"></a>Apollo</h5><blockquote><p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心,能够集中化管理应用不同环境、不同集群的配置,配置修改后能够实时推送到应用端,并且具备规范的权限、流程治理等特性,适用于微服务配置管理场景.</p></blockquote><ul><li><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Nacos-1"><a href="#Nacos-1" class="headerlink" title="Nacos"></a>Nacos</h5><blockquote><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。<br>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p></blockquote><ul><li><a href="https://nacos.io/zh-cn/" target="_blank" rel="noopener">官网</a></li><li><a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">GitHub</a></li></ul><h3 id="4-权限认证"><a href="#4-权限认证" class="headerlink" title="4.权限认证"></a>4.权限认证</h3><blockquote><p>作用:根据系统设置的安全规则或者安全策略,用户可以访问而且只能访问自己被授权的资源,不多不少.</p></blockquote><h5 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h5><blockquote><p>Springsecurity 是一个强大的、高度可定制的身份验证和访问控制框架。 它是确保基于 spring 的应用程序安全的事实标准。主要致力于为 Java 应用程序提供身份验证和授权。</p></blockquote><ul><li><a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener">官网</a></li></ul><h5 id="Apache-Shiro"><a href="#Apache-Shiro" class="headerlink" title="Apache Shiro"></a>Apache Shiro</h5><blockquote><p>Apache Shiro是一个强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。 有了Shiro易于理解的API，你可以快速而轻松地保护任何应用程序——从最小的移动应用程序到最大的 web 和企业应用程序.</p></blockquote><ul><li><a href="http://shiro.apache.org/" target="_blank" rel="noopener">官网</a></li></ul><h3 id="5-微服务通信协议"><a href="#5-微服务通信协议" class="headerlink" title="5.微服务通信协议"></a>5.微服务通信协议</h3><h5 id="Rest"><a href="#Rest" class="headerlink" title="Rest"></a>Rest</h5><blockquote><p>通过HTTP/HTTPS发送Rest请求进行数据交互</p></blockquote><h5 id="RPC（Remote-Procedure-Call）"><a href="#RPC（Remote-Procedure-Call）" class="headerlink" title="RPC（Remote Procedure Call）"></a>RPC（Remote Procedure Call）</h5><blockquote><p>一种通过网络从远程计算机程序上请求服务,而不需要了解底层网络技术的协议.RPC不依赖于具体的网络传输协议,tcp、udp等都可以.</p></blockquote><h5 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h5><blockquote><p>A high-performance, open-source universal RPC framework 所谓RPC(remote procedure call 远程过程调用)框架实际是提供了一套机制,使得应用程序之间可以进行通信,而且也遵从server/client模型.使用的时候客户端调用server端提供的接口就像是调用本地的函数一样.</p></blockquote><ul><li><a href="https://www.grpc.io/" target="_blank" rel="noopener">官网</a></li></ul><h5 id="RMI（Remote-Method-Invocation）"><a href="#RMI（Remote-Method-Invocation）" class="headerlink" title="RMI（Remote Method Invocation）"></a>RMI（Remote Method Invocation）</h5><blockquote><p>纯Java调用</p></blockquote><h3 id="6-服务接口调用"><a href="#6-服务接口调用" class="headerlink" title="6.服务接口调用"></a>6.服务接口调用</h3><blockquote><p>作用: 多个服务之间的通讯</p></blockquote><h5 id="Feign-HTTP"><a href="#Feign-HTTP" class="headerlink" title="Feign(HTTP)"></a>Feign(HTTP)</h5><blockquote><p>Spring Cloud Netflix 的微服务都是以 HTTP 接口的形式暴露的,所以可以用 Apache 的 HttpClient 或 Spring 的 RestTemplate 去调用,而 Feign 是一个使用起来更加方便的 HTTP 客戶端,使用起来就像是调用自身工程的方法,而感觉不到是调用远程方法.</p></blockquote><ul><li><a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">GitHub</a></li></ul><h3 id="7-服务熔断"><a href="#7-服务熔断" class="headerlink" title="7.服务熔断"></a>7.服务熔断</h3><blockquote><p>作用: 当请求到达一定阈值时不让请求继续.</p></blockquote><h5 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h5><blockquote><p>Hystrix 是一个延迟和容错库，旨在隔离访问远程系统、服务和第三方库的点，阻止级联故障，并使复杂的分布式系统中不可避免的故障恢复能力。</p></blockquote><ul><li><a href="()https://github.com/Netflix/Hystrix">GitHub</a></li></ul><h5 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h5><blockquote><p>Sentinel 以“流”为切入点，在流量控制、断路和系统自适应保护等多个领域开展工作，保证微服务的可靠性。</p></blockquote><ul><li><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">GitHub</a></li></ul><h3 id="8-服务负载均衡"><a href="#8-服务负载均衡" class="headerlink" title="8.服务负载均衡"></a>8.服务负载均衡</h3><blockquote><p>作用:降低服务压力,增加吞吐量</p></blockquote><h5 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h5><blockquote><p>Ribbon 是一个基于HTTP和TCP的客户端负载均衡工具,它基于Netflix Ribbon实现.</p></blockquote><ul><li><a href="https://github.com/Netflix/ribbon" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h5><blockquote><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器,同时也提供了IMAP/POP3/SMTP服务</p></blockquote><ul><li><a href="https://github.com/nginx/nginx" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Nginx-与-Ribbon区别"><a href="#Nginx-与-Ribbon区别" class="headerlink" title="Nginx 与 Ribbon区别:"></a>Nginx 与 Ribbon区别:</h5><blockquote><p>Nginx 属于服务端负载均衡,Ribbon属于客户端负载均衡.<br>Nginx作用与Tomcat,Ribbon作用与各个服务之间的调用(RPC).</p></blockquote><h3 id="9-消息队列"><a href="#9-消息队列" class="headerlink" title="9.消息队列"></a>9.消息队列</h3><blockquote><p>作用: 解耦业务,异步化处理数据.</p></blockquote><h5 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h5><ul><li><a href="http://kafka.apache.org/" target="_blank" rel="noopener">官网</a><h5 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h5></li><li><a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">官网</a><h5 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h5></li><li><a href="http://rocketmq.apache.org/" target="_blank" rel="noopener">官网</a><h5 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h5></li><li><a href="http://activemq.apache.org/" target="_blank" rel="noopener">官网</a></li></ul><h3 id="10-日志采集（ELK）"><a href="#10-日志采集（ELK）" class="headerlink" title="10.日志采集（ELK）"></a>10.日志采集（ELK）</h3><blockquote><p>作用:收集各服务日志提供日志分析、用户画像等.</p></blockquote><h5 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h5><ul><li><a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h5><ul><li><a href="https://github.com/elastic/logstash" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h5><ul><li><a href="https://github.com/elastic/kibana" target="_blank" rel="noopener">GitHub</a></li></ul><h3 id="11-微服务网关（API-Gateway）"><a href="#11-微服务网关（API-Gateway）" class="headerlink" title="11.微服务网关（API-Gateway）"></a>11.微服务网关（API-Gateway）</h3><blockquote><p>作用:外部请求通过API网关进行拦截处理,再转发到真正的服务.</p></blockquote><h5 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h5><blockquote><p>Zuul 是一个网关服务，它提供动态路由、监视、弹性、安全性等等。</p></blockquote><ul><li><a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h5><blockquote><p>Spring Cloud Gateway 旨在提供一种简单而有效的方法来路由到 api，并为它们提供交叉关注点，如安全性、监视 / 度量和弹性。</p></blockquote><ul><li><a href="https://spring.io/projects/spring-cloud-gateway" target="_blank" rel="noopener">官网</a></li></ul><h3 id="12-服务监控"><a href="#12-服务监控" class="headerlink" title="12.服务监控"></a>12.服务监控</h3><blockquote><p>作用:以可视化或非可视化的形式展示出各个服务的运行情况(CPU、内存、访问量等).</p></blockquote><h5 id="Zabbix"><a href="#Zabbix" class="headerlink" title="Zabbix"></a>Zabbix</h5><ul><li><a href="https://github.com/jjmartres/Zabbix" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Nagios"><a href="#Nagios" class="headerlink" title="Nagios"></a>Nagios</h5><ul><li><a href="https://www.nagios.org/" target="_blank" rel="noopener">官网</a></li></ul><h5 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h5><ul><li><a href="https://metrics.dropwizard.io/" target="_blank" rel="noopener">官网</a></li></ul><h3 id="13-服务链路追踪"><a href="#13-服务链路追踪" class="headerlink" title="13.服务链路追踪"></a>13.服务链路追踪</h3><blockquote><p>作用:明确服务之间的调用关系.</p></blockquote><h5 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a>Zipkin</h5><blockquote><p>ZipKin 是一个开放源代码的分布式跟踪系统，由 Twitter 公司开源，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。</p></blockquote><ul><li><a href="https://github.com/openzipkin/zipkin" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Brave"><a href="#Brave" class="headerlink" title="Brave"></a>Brave</h5><ul><li><a href="https://github.com/openzipkin/brave" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Pinpoint"><a href="#Pinpoint" class="headerlink" title="Pinpoint"></a>Pinpoint</h5><blockquote><p>Pinpoint 是一个用 Java / PHP 编写的大规模分布式系统的 APM (应用程序性能管理)工具。 受到 Dapper 的启发，Pinpoint 提供了一个解决方案，通过跟踪跨分布式应用程序的事务，帮助分析系统的整体结构以及其中的组件如何相互连接。</p></blockquote><ul><li><a href="https://github.com/naver/pinpoint" target="_blank" rel="noopener">GitHub</a></li></ul><h5 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h5><blockquote><p>Spring Cloud Sleuth 为 Spring Cloud 实现了一个分布式跟踪解决方案，大量借鉴了 Dapper、 Zipkin 和 HTrace。 对于大多数用户来说，Sleuth 应该是不可见的，并且您与外部系统的所有交互都应该自动检测。 您可以简单地在日志中捕获数据，或者将数据发送到远程收集器服务。</p></blockquote><ul><li><a href="https://spring.io/projects/spring-cloud-sleuth" target="_blank" rel="noopener">官网</a></li></ul><h5 id="opentracing"><a href="#opentracing" class="headerlink" title="opentracing"></a>opentracing</h5><ul><li><a href="https://opentracing.io/" target="_blank" rel="noopener">官网</a></li></ul><h3 id="14-数据存储"><a href="#14-数据存储" class="headerlink" title="14.数据存储"></a>14.数据存储</h3><blockquote><p>作用: 存储数据</p></blockquote><h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h4><h5 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h5><ul><li><a href="https://www.mysql.com/" target="_blank" rel="noopener">官网</a></li></ul><h5 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h5><ul><li><a href="https://www.oracle.com/index.html" target="_blank" rel="noopener">官网</a></li></ul><h5 id="MsSql"><a href="#MsSql" class="headerlink" title="MsSql"></a>MsSql</h5><ul><li><a href="https://docs.microsoft.com/zh-cn/sql/?view=sql-server-ver15" target="_blank" rel="noopener">官网</a></li></ul><h5 id="PostgreSql"><a href="#PostgreSql" class="headerlink" title="PostgreSql"></a>PostgreSql</h5><ul><li><a href="https://www.postgresql.org/" target="_blank" rel="noopener">官网</a></li></ul><h4 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h4><h5 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h5><ul><li><a href="https://www.mongodb.com/" target="_blank" rel="noopener">官网</a></li></ul><h5 id="Elasticsearch-1"><a href="#Elasticsearch-1" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h5><ul><li><a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">GitHub</a></li></ul><h3 id="15-缓存"><a href="#15-缓存" class="headerlink" title="15.缓存"></a>15.缓存</h3><blockquote><p>作用: 存储数据.</p></blockquote><h5 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h5><ul><li><a href="https://redis.io/" target="_blank" rel="noopener">官网</a></li></ul><h3 id="16-分库分表"><a href="#16-分库分表" class="headerlink" title="16.分库分表"></a>16.分库分表</h3><blockquote><p>作用: 数据库分库分表方案.</p></blockquote><h5 id="shardingsphere"><a href="#shardingsphere" class="headerlink" title="shardingsphere"></a>shardingsphere</h5><ul><li><a href="http://shardingsphere.apache.org/" target="_blank" rel="noopener">官网</a></li></ul><h5 id="Mycat"><a href="#Mycat" class="headerlink" title="Mycat"></a>Mycat</h5><ul><li><a href="http://www.mycat.io/" target="_blank" rel="noopener">官网</a></li></ul><h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><blockquote><p>作用: 将项目快速部署、上线、持续集成.</p></blockquote><h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><ul><li><a href="https://www.docker.com/" target="_blank" rel="noopener">官网</a></li></ul><h5 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h5><blockquote><p>Jenkins是一款开源 CI&amp;CD 软件，用于自动化各种任务，包括构建、测试和部署软件。Jenkins 支持各种运行方式，可通过系统包、Docker 或者通过一个独立的 Java 程序。</p></blockquote><ul><li><a href="https://jenkins.io/zh/" target="_blank" rel="noopener">官网</a></li></ul><h5 id="Kubernetes-K8s"><a href="#Kubernetes-K8s" class="headerlink" title="Kubernetes(K8s)"></a>Kubernetes(K8s)</h5><blockquote><p>Kubernetes 是一个用于自动部署、扩展和管理集装箱化应用程序的开放源码系统.</p></blockquote><ul><li><a href="https://kubernetes.io/" target="_blank" rel="noopener">官网</a></li></ul><h5 id="Mesos"><a href="#Mesos" class="headerlink" title="Mesos"></a>Mesos</h5><blockquote><p>一个分布式系统内核，Mesos 使用与 Linux 内核相同的原则构建，只是抽象层次不同。 Mesoskernel 可以在每台机器上运行，并为应用程序(如 Hadoop、 Spark、 Kafka、 Elasticsearch)提供 API，用于跨整个数据中心和云环境的资源管理和调度。</p></blockquote><ul><li><a href="http://mesos.apache.org/" target="_blank" rel="noopener">官网</a></li></ul><h5 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h5><h2 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h2><ul><li>2019-12-09 21:00 初稿</li></ul>]]></content>
    
    <summary type="html">
    
      微服务技术栈
    
    </summary>
    
    
      <category term="微服务" scheme="https://weixingyang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>微服务 之 概念</title>
    <link href="https://weixingyang.github.io/2019/11/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1%20%E4%B9%8B%20%E6%A6%82%E5%BF%B5/"/>
    <id>https://weixingyang.github.io/2019/11/27/微服务 之 概念/</id>
    <published>2019-11-27T14:36:00.000Z</published>
    <updated>2019-12-09T13:12:42.232Z</updated>
    
    <content type="html"><![CDATA[<h5 id="微服务起源"><a href="#微服务起源" class="headerlink" title="微服务起源"></a>微服务起源</h5><blockquote><p>微服务是由 Peter Rodgers 博士于 2005 年度云计算博览会提出的微 Web 服务 (Micro-Web-Service) 开始，Juval Löwy 则是与他有类似的前导想法，将类别变成细粒服务 (granular services)，以作为 Microsoft 下一阶段的软件架构，其核心想法是让服务是由类似 Unix 管道的访问方式使用，而且复杂的服务背后是使用简单 URI 来开放接口，任何服务，任何细粒都能被开放 (exposed)。这个设计在 HP 的实验室被实现，具有改变复杂软件系统的强大力量。</p><p>2014年，<a href="https://martinfowler.com/" target="_blank" rel="noopener">Martin Fowler</a> 与 <a href="https://bovon.org/" target="_blank" rel="noopener">James Lewis</a> 共同提出了微服务的概念，定义了微服务是由以单一应用程序构成的小服务，自己拥有自己的行程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用 HTTP API 通信。同时服务会使用最小的规模的集中管理 (例如 Docker) 能力，服务可以用不同的编程语言与数据库等组件实现[1]。</p></blockquote><a id="more"></a><h5 id="什么是微服务？"><a href="#什么是微服务？" class="headerlink" title="什么是微服务？"></a>什么是微服务？</h5><blockquote><p><em>The term “<a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">Microservice Architecture</a>“ has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services. While there is no precise definition of this architectural style, there are certain common characteristics around organization around business capability, automated deployment, intelligence in the endpoints, and decentralized control of languages and data.</em></p><p><em>“微服务体系结构”这个术语在过去几年中迅速出现，用来描述一种特殊的方法，将软件应用程序设计为可独立部署的服务套件。 虽然这种架构风格没有精确的定义，但是围绕着业务能力、自动部署、端点智能以及语言和数据的分散控制，围绕着组织有一些共同的特征。</em></p><p>​                                                                                                                         <a href="https://martinfowler.com/" target="_blank" rel="noopener">– Martin Fowler Microservice</a> </p></blockquote><blockquote><p>微服务 (Microservices) 是一种<a href="https://zh.wikipedia.org/wiki/软件架构" target="_blank" rel="noopener">软件架构风格</a>，它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关 (Language-Independent/Language agnostic) 的 API 集相互通信。                         </p><p>​                                                                                                                         <a href="https://zh.wikipedia.org/wiki/微服務" target="_blank" rel="noopener">– 维基百科（中文）</a></p></blockquote><blockquote><p>Microservices are a software development technique —a variant of the service-oriented architecture (SOA) structural style— that arranges an application as a collection of loosely coupled services.[1] In a microservices architecture, services are fine-grained and the protocols are lightweight. </p><p>微服务是一种软件开发技术—- 是面向服务的体系结构结构风格的变体—- 将应用程序排列成松散耦合服务的集合。 在微服务体系结构中，服务是细粒度的，协议是轻量级的。                                   </p><p>​                                                                                                                          <a href="https://en.wikipedia.org/wiki/Microservices" target="_blank" rel="noopener">– 维基百科</a></p></blockquote><blockquote><p>简而言之，微服务体系结构风格[1]是一种将单个应用程序开发成一套小型服务的方法，每个应用程序都在自己的进程中运行，并与轻量级机制(通常是 HTTP 资源 API)通信。 这些服务是围绕业务能力构建的，可以通过完全自动化的部署机制独立部署。 这些服务只有最低限度的集中管理，可以用不同的编程语言编写，并使用不同的数据存储技术。</p></blockquote><h5 id="微服务体系结构的特点-Characteristics-of-a-Microservice-Architecture"><a href="#微服务体系结构的特点-Characteristics-of-a-Microservice-Architecture" class="headerlink" title="微服务体系结构的特点 Characteristics of a Microservice Architecture "></a>微服务体系结构的特点 <a href="https://martinfowler.com/articles/microservices.html#CharacteristicsOfAMicroserviceArchitecture" target="_blank" rel="noopener">Characteristics of a Microservice Architecture </a></h5><ul><li>通过服务实现组件化 <a href="https://martinfowler.com/articles/microservices.html#ComponentizationViaServices" target="_blank" rel="noopener">Componentization via Services </a></li><li>围绕业务能力组织 <a href="https://martinfowler.com/articles/microservices.html#OrganizedAroundBusinessCapabilities" target="_blank" rel="noopener">Organized around Business Capabilities </a></li><li>产品而非项目 <a href="https://martinfowler.com/articles/microservices.html#ProductsNotProjects" target="_blank" rel="noopener">Products not Projects </a></li><li>智能端点和哑管道 <a href="https://martinfowler.com/articles/microservices.html#SmartEndpointsAndDumbPipes" target="_blank" rel="noopener">Smart endpoints and dumb pipes </a></li><li>分权治理 <a href="https://martinfowler.com/articles/microservices.html#DecentralizedGovernance" target="_blank" rel="noopener">Decentralized Governance </a></li><li>分散式数据管理 <a href="https://martinfowler.com/articles/microservices.html#DecentralizedDataManagement" target="_blank" rel="noopener">Decentralized Data Management </a></li><li>基础设施自动化 <a href="https://martinfowler.com/articles/microservices.html#InfrastructureAutomation" target="_blank" rel="noopener">Infrastructure Automation </a></li><li>为失败而设计 <a href="https://martinfowler.com/articles/microservices.html#DesignForFailure" target="_blank" rel="noopener">Design for failure </a></li><li>进化设计 <a href="https://martinfowler.com/articles/microservices.html#EvolutionaryDesign" target="_blank" rel="noopener">Evolutionary Design </a></li></ul><h5 id="微服务的优点"><a href="#微服务的优点" class="headerlink" title="微服务的优点"></a>微服务的优点</h5><p>第一，<strong>它解决了复杂问题</strong>。它把可能会变得庞大的单体应用程序分解成一套服务。虽然功能数量不变，但是应用程序已经被分解成可管理的块或者服务。每个服务都有一个明确定义边界的方式，如远程过程调用（RPC）驱动或消息驱动 API。微服务架构模式强制一定程度的模块化，实际上，使用单体代码来实现是极其困难的。因此，使用微服务架构模式，个体服务能被更快地开发，并更容易理解与维护。</p><p>第二，这种架构使得<strong>每个服务都可以由一个团队独立专注开发</strong>。开发者可以<strong>自由选择任何符合服务 API 契约的技术</strong>。当然，更多的组织是希望通过技术选型限制来避免完全混乱的状态。然而，这种自由意味着开发人员不再有可能在这种自由的新项目开始时使用过时的技术。当编写一个新服务时，他们可以选择当前的技术。此外，由于服务较小，使用当前技术重写旧服务将变得更加可行。</p><p>第三，微服务架构模式可以<strong>实现每个微服务独立部署</strong>。开发人员根本不需要去协调部署本地变更到服务。这些变更一经测试即可立即部署。比如，UI 团队可以执行 A|B 测试，并快速迭代 UI 变更。微服务架构模式使得持续部署成为可能。</p><p>最后，微服务架构模式使得<strong>每个服务能够独立扩展</strong>。您可以仅部署满足每个服务的容量和可用性约束的实例数目。此外，您可以使用与服务资源要求最匹配的硬件。例如，您可以在 ECS Compute Optimized 实例上部署一个 CPU 密集型图像处理服务，并且在 ECS Memory-optimized 实例上部署一个内存数据库服务。</p><h5 id="微服务的缺点"><a href="#微服务的缺点" class="headerlink" title="微服务的缺点"></a>微服务的缺点</h5><p>第一，微服务是<strong>一个分布式系统，其使得整体变得复杂</strong>。开发者需要选择和实现基于消息或者 RPC 的进程间通信机制。此外，由于目标请求可能很慢或者不可用，他们必须要编写代码来处理局部故障。虽然这些并不是很复杂、高深，但模块间通过语言级方法/过程调用相互调用，这比单体应用要复杂得多。</p><p>第二，<strong>分区数据库架构</strong>。在基于微服务的应用程序中，您需要更新不同服务所用的数据库。通常不会选择分布式事务，不仅仅是因为 <strong>CAP 定理</strong>。他们根本不支持如今高度可扩展的 NoSQL 数据库和消息代理。您最后不得不使用基于最终一致性的方法，这对于开发人员来说更具挑战性。</p><p>第三，微服务<strong>测试应用程序也很复杂</strong>。对于微服务来说需要启动该服务及其所依赖的所有服务，或者至少为这些服务配置存根。</p><p>第四，<strong>实现了跨越多服务变更</strong>。例如，我们假设您正在实现一个变更服务 A、服务 B 和 服务 C 的需求，其中 A 依赖于 B，且 B 依赖于 C。在单体应用程序中，您可以简单地修改相应的模块、整合变更并一次性部署他们。相反，在微服务中您需要仔细规划和协调出现的变更至每个服务。例如，您需要更新服务 C，然后更新服务 B，最后更新服务 A。幸运的是，大多数变更只会影响一个服务，需要协调的多服务变更相对较少。</p><p>第五，基于<strong>微服务应用程序的部署也是相当复杂</strong>。微服务应用程序通常由大量的服务组成。要成功部署微服务应用程序，<strong>需要求开发人员能高度控制部署方式和高度自动化</strong>。</p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>微服务是将单一的应用程序拆分成多个微小的服务，各个小服务之间<strong>松耦合、高内聚</strong>，<strong>每个小服务可以单独进行开发，不依赖于具体的编程语言</strong>，也可以使用<strong>不同的数据存储技术</strong>，各个服务可以<strong>独立部署</strong>，拥有各自的进程，相互之间<strong>通过轻量化的机制进行通信</strong>（如基于http的API接口），所有的服务<strong>共同实现具体的业务功能</strong>。</p><p><strong>微服务架构是一种思想，而真正开发时是采用分布式系统开发。</strong></p><p><strong>微服务的目标在于充分分解应用程序以方便应用敏捷开发和部署。</strong></p><p><strong>微服务的实现思路是将应用程序分解成一套较小的互联服务。</strong></p><p>微服务通常要实现三大指标：</p><ul><li><strong>高可用</strong></li><li><strong>高性能</strong></li><li><strong>高并发</strong></li></ul><p>微服务通常面临的问题：</p><ul><li>客户端如何访问<ul><li>API Gateway 、 WebUI</li></ul></li><li>服务与服务之间如何通信（对内RPC，对外RESTFUL）<ul><li>同步：<ul><li>HTTP：跨防火墙</li><li>RPC：传输效率高</li></ul></li><li>异步<ul><li>消息队列</li></ul></li></ul></li><li>服务如何治理<ul><li>注册中心</li><li>监控中心</li></ul></li><li>服务挂了怎么办<ul><li>重试机制</li><li>限流</li><li>熔断机制</li><li>负载均衡</li><li>降级</li><li>本地缓存</li></ul></li></ul><p>构建复杂的微服务应用程序本质上是困难的。单体架构模式只适用于简单、轻量级的应用程序，如果您使用它来构建复杂应用，您最终会陷入痛苦的境地。微服务架构模式是复杂、持续发展应用的一个更好的选择。尽管它存在着缺点和实现挑战。</p><h5 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h5><blockquote><p>《Microservices Patterns》</p></blockquote><h5 id="文献参考"><a href="#文献参考" class="headerlink" title="文献参考"></a>文献参考</h5><blockquote><p>Microservices：<a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa</a></p><p>Martin Fowler：<a href="https://martinfowler.com/" target="_blank" rel="noopener">https://martinfowler.com/</a></p><p>James Lewis：<a href="https://bovon.org/" target="_blank" rel="noopener">https://bovon.org/</a></p><p>维基百科（中文）：<a href="https://zh.wikipedia.org/wiki/微服務" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/微服務</a></p><p>维基百科：<a href="https://en.wikipedia.org/wiki/Microservices" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Microservices</a></p></blockquote><h5 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h5><ul><li>2019-11-27 22:26 初稿</li></ul>]]></content>
    
    <summary type="html">
    
      微服务概念
    
    </summary>
    
    
      <category term="微服务" scheme="https://weixingyang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>gulp-babel 取消严格模式(&quot;use strict&quot;)</title>
    <link href="https://weixingyang.github.io/2019/07/23/gulp-babel%E5%8F%96%E6%B6%88%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8Fuse%20strict/"/>
    <id>https://weixingyang.github.io/2019/07/23/gulp-babel取消严格模式use strict/</id>
    <published>2019-07-23T01:38:00.000Z</published>
    <updated>2019-11-14T17:26:26.046Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>插件地址 ➡️ <a href="https://github.com/genify/babel-plugin-transform-remove-strict-mode" target="_blank" rel="noopener">https://github.com/genify/babel-plugin-transform-remove-strict-mode</a></p></blockquote><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-transform-remove-strict-mode</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><blockquote><p><strong>添加内容到<code>.babelrc</code>文件</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-remove-strict-mode"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重新执行打包命令即可</p></blockquote>]]></content>
    
    <summary type="html">
    
      gulp-babel 取消严格模式(&quot;use strict&quot;)
    
    </summary>
    
    
      <category term="日记本" scheme="https://weixingyang.github.io/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Git分支的创建、删除、切换</title>
    <link href="https://weixingyang.github.io/2019/07/01/Git%E5%88%86%E6%94%AF%E7%9A%84%E5%88%9B%E5%BB%BA%E3%80%81%E5%88%A0%E9%99%A4%E3%80%81%E5%88%87%E6%8D%A2/"/>
    <id>https://weixingyang.github.io/2019/07/01/Git分支的创建、删除、切换/</id>
    <published>2019-07-01T02:06:00.000Z</published>
    <updated>2019-11-14T17:26:25.923Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、本地创建新分支并切换到新分支"><a href="#1、本地创建新分支并切换到新分支" class="headerlink" title="1、本地创建新分支并切换到新分支"></a>1、本地创建新分支并切换到新分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git checkout -b 分支名</span><br></pre></td></tr></table></figure><h5 id="2、提交分支到远程仓库"><a href="#2、提交分支到远程仓库" class="headerlink" title="2、提交分支到远程仓库"></a>2、提交分支到远程仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git push origin 分支名</span><br></pre></td></tr></table></figure><h5 id="3、切换分支"><a href="#3、切换分支" class="headerlink" title="3、切换分支"></a>3、切换分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git checkout 分支名</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="4、删除远程分支"><a href="#4、删除远程分支" class="headerlink" title="4、删除远程分支"></a>4、删除远程分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git push origin --delete 分支名</span><br></pre></td></tr></table></figure><h5 id="5、删除本地分支"><a href="#5、删除本地分支" class="headerlink" title="5、删除本地分支"></a>5、删除本地分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git branch -D 分支名</span><br></pre></td></tr></table></figure><blockquote><p>Tips：其他分支命令</p></blockquote><ul><li>查看当前分支 <code>git branch</code></li><li>查看所属分支 <code>git branch -a</code></li></ul>]]></content>
    
    <summary type="html">
    
      Git分支的创建、删除、切换
    
    </summary>
    
    
      <category term="日记本" scheme="https://weixingyang.github.io/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Git彻底删除历史提交记录的方法</title>
    <link href="https://weixingyang.github.io/2019/06/05/Git%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://weixingyang.github.io/2019/06/05/Git彻底删除历史提交记录的方法/</id>
    <published>2019-06-05T02:22:00.000Z</published>
    <updated>2019-11-27T17:36:38.036Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1、查看Git提交记录"><a href="#1、查看Git提交记录" class="headerlink" title="1、查看Git提交记录"></a>1、查看Git提交记录</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git log</span><br></pre></td></tr></table></figure><hr><h6 id="2、找到需要回滚到的提交点，复制它的hash值"><a href="#2、找到需要回滚到的提交点，复制它的hash值" class="headerlink" title="2、找到需要回滚到的提交点，复制它的hash值"></a>2、找到需要回滚到的提交点，复制它的hash值</h6><p><img src="/WeiXingYang.github.io/images/2743275-f79de5b6d7280d81.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git reset --hard 你复制的hash值</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h6 id="3、将当前指向的head推到git"><a href="#3、将当前指向的head推到git" class="headerlink" title="3、将当前指向的head推到git"></a>3、将当前指向的head推到git</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git push --force</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Git彻底删除历史提交记录的方法
    
    </summary>
    
    
      <category term="日记本" scheme="https://weixingyang.github.io/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>玩转MySQL优化命令</title>
    <link href="https://weixingyang.github.io/2019/05/06/%E7%8E%A9%E8%BD%ACMySQL%E4%BC%98%E5%8C%96%E5%91%BD%E4%BB%A4/"/>
    <id>https://weixingyang.github.io/2019/05/06/玩转MySQL优化命令/</id>
    <published>2019-05-06T10:05:00.000Z</published>
    <updated>2019-11-14T17:26:26.058Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、MySQL更改为只能本地登录"><a href="#1、MySQL更改为只能本地登录" class="headerlink" title="1、MySQL更改为只能本地登录"></a>1、MySQL更改为只能本地登录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> use mysql;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> select user,host,Password from user <span class="built_in">where</span> user=<span class="string">'root'</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> delete from user <span class="built_in">where</span> user=<span class="string">'root'</span> and host=<span class="string">'%'</span>;</span></span><br></pre></td></tr></table></figure><a id="more"></a><hr><h5 id="2、MySQL授予外网登陆权限"><a href="#2、MySQL授予外网登陆权限" class="headerlink" title="2、MySQL授予外网登陆权限"></a>2、MySQL授予外网登陆权限</h5><p><code>grant all privileges on *.* to 授予外网登陆的用户名@&#39;%&#39; identified by &#39;密码&#39; WITH GRANT OPTION;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> grant all privileges on *.* to root@<span class="string">'%'</span> identified by <span class="string">'root'</span> WITH GRANT OPTION;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure><hr><h5 id="3、更改MySQL的存储目录"><a href="#3、更改MySQL的存储目录" class="headerlink" title="3、更改MySQL的存储目录"></a>3、<a href="https://www.jianshu.com/p/81b253355ffd" target="_blank" rel="noopener">更改MySQL的存储目录</a></h5>]]></content>
    
    <summary type="html">
    
      玩转MySQL优化命令
    
    </summary>
    
    
      <category term="MySQL" scheme="https://weixingyang.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>IDEA设置后端代码开发规范</title>
    <link href="https://weixingyang.github.io/2019/01/23/IDEA%E8%AE%BE%E7%BD%AE%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>https://weixingyang.github.io/2019/01/23/IDEA设置后端代码开发规范/</id>
    <published>2019-01-23T02:33:00.000Z</published>
    <updated>2019-11-27T17:36:27.515Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、IDEA-配置svn"><a href="#1、IDEA-配置svn" class="headerlink" title="1、IDEA 配置svn"></a>1、IDEA 配置svn</h5><p>提交svn报错：<img src="/WeiXingYang.github.io/images/2743275-ef2b3fcbeb66c50b.png" alt></p><a id="more"></a><h6 id="1-1、下载："><a href="#1-1、下载：" class="headerlink" title="1.1、下载："></a>1.1、下载：</h6><p><a href="https://www.visualsvn.com/downloads/" target="_blank" rel="noopener">https://www.visualsvn.com/downloads/</a><br><img src="/WeiXingYang.github.io/images/2743275-44ad2e9c56003729.png" alt></p><h6 id="1-2、修改IDEA配置指向的路径"><a href="#1-2、修改IDEA配置指向的路径" class="headerlink" title="1.2、修改IDEA配置指向的路径"></a>1.2、修改IDEA配置指向的路径</h6><h2 id><a href="#" class="headerlink" title></a><img src="/WeiXingYang.github.io/images/2743275-42eacfa5fcf4012b.png" alt></h2><h5 id="2、IDEA-设置-Tab-键为-4-个空格"><a href="#2、IDEA-设置-Tab-键为-4-个空格" class="headerlink" title="2、IDEA 设置 Tab 键为 4 个空格"></a>2、IDEA 设置 Tab 键为 4 个空格</h5><p>Scheme 选择 <strong><em>Project</em></strong> ,在下面把取消勾选  <strong><em>Use tab character</em></strong><br><img src="/WeiXingYang.github.io/images/2743275-206f9205699535f0.png" alt></p><hr><h5 id="3、IDEA-设置编码格式为-UTF-8"><a href="#3、IDEA-设置编码格式为-UTF-8" class="headerlink" title="3、IDEA 设置编码格式为 UTF-8"></a>3、IDEA 设置编码格式为 UTF-8</h5><p><img src="/WeiXingYang.github.io/images/2743275-7552ebdc7e6ca13a.png" alt></p><hr><h5 id="4、IDEA-设置换行符为-Unix-编码格式"><a href="#4、IDEA-设置换行符为-Unix-编码格式" class="headerlink" title="4、IDEA 设置换行符为 Unix 编码格式"></a>4、IDEA 设置换行符为 Unix 编码格式</h5><p><img src="/WeiXingYang.github.io/images/2743275-753b9ab5b4add45a.png" alt></p><hr><h5 id="5、IDEA-设置类注释模板"><a href="#5、IDEA-设置类注释模板" class="headerlink" title="5、IDEA 设置类注释模板"></a>5、IDEA 设置类注释模板</h5><p><img src="/WeiXingYang.github.io/images/2743275-5dc31e3d9d0a461e.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Created by 思伟 on $&#123;DATE&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      IDEA设置后端代码开发规范
    
    </summary>
    
    
      <category term="日记本" scheme="https://weixingyang.github.io/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Docker 简介</title>
    <link href="https://weixingyang.github.io/2019/01/20/Docker%20%E7%AE%80%E4%BB%8B/"/>
    <id>https://weixingyang.github.io/2019/01/20/Docker 简介/</id>
    <published>2019-01-20T11:36:00.000Z</published>
    <updated>2019-12-16T14:38:22.618Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h3><p>官网地址：<a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></p><p>Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 [2013 年 3 月以 Apache 2.0 授权协议开源][docker-soft]，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟（OCI）。</p><p>Docker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目已经超过 4 万 6 千个星标和一万多个 fork。甚至由于 Docker 项目的火爆，在 2013 年底，dotCloud 公司决定改名为 Docker。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Google 也在其 PaaS 产品中广泛应用 Docker。</p><p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为 容器 。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。</p><p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><p>下面的图片比较了 Docker 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><p><img src="https://s2.ax1x.com/2019/12/16/Q5d2zF.png" alt="Q5d2zF.png"></p><p><img src="https://s2.ax1x.com/2019/12/16/Q5dOQe.png" alt="Q5dOQe.png"></p><h3 id="为什么需要-Docker"><a href="#为什么需要-Docker" class="headerlink" title="为什么需要 Docker"></a>为什么需要 Docker</h3><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p><h3 id="更高效的利用系统资源"><a href="#更高效的利用系统资源" class="headerlink" title="更高效的利用系统资源"></a>更高效的利用系统资源</h3><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h3 id="更快速的启动时间"><a href="#更快速的启动时间" class="headerlink" title="更快速的启动时间"></a>更快速的启动时间</h3><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><h3 id="一致的运行环境"><a href="#一致的运行环境" class="headerlink" title="一致的运行环境"></a>一致的运行环境</h3><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题。</p><h3 id="持续交付和部署"><a href="#持续交付和部署" class="headerlink" title="持续交付和部署"></a>持续交付和部署</h3><p>对开发和运维（==DevOps==）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p><p>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 ==Dockerfile== 来进行镜像构建，并结合 ==持续集成(Continuous Integration)== 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment) 系统进行自动部署。</p><p>而且使用 ==Dockerfile== 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p><h3 id="更轻松的迁移"><a href="#更轻松的迁移" class="headerlink" title="更轻松的迁移"></a>更轻松的迁移</h3><p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><h3 id="更轻松的维护和扩展"><a href="#更轻松的维护和扩展" class="headerlink" title="更轻松的维护和扩展"></a>更轻松的维护和扩展</h3><p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h3 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h3><p><img src="https://s2.ax1x.com/2019/12/16/Q5wZes.png" alt="Q5wZes.png"></p><h3 id="Docker-引擎"><a href="#Docker-引擎" class="headerlink" title="Docker 引擎"></a>Docker 引擎</h3><p>Docker 引擎是一个包含以下主要组件的客户端服务器应用程序。</p><ul><li>一种服务器，它是一种称为守护进程并且长时间运行的程序。</li><li>REST API 用于指定程序可以用来与守护进程通信的接口，并指示它做什么。</li><li>一个有命令行界面 (CLI) 工具的客户端。</li></ul><p><img src="https://s2.ax1x.com/2019/12/16/Q5wKYV.png" alt="Q5wKYV.png"></p><h3 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h3><ul><li>Docker 使用客户端 - 服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。</li><li>Docker 容器通过 Docker 镜像来创建。</li><li>容器与镜像的关系类似于面向对象编程中的对象与类。</li></ul><p><img src="https://s2.ax1x.com/2019/12/16/Q5wMWT.png" alt="Q5wMWT.png"></p><ul><li>Docker API (<a href="https://docs.docker.com/reference/api/docker_remote_api" target="_blank" rel="noopener">https://docs.docker.com/reference/api/docker_remote_api</a>)</li><li>Docker Hub(<a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a>) </li></ul><h2 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h2><ul><li>2019.01.20 19:36 初稿</li><li>2019.11.22 14:30 更新</li></ul>]]></content>
    
    <summary type="html">
    
      微服务 Docker
    
    </summary>
    
    
      <category term="微服务" scheme="https://weixingyang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux配置SSH Key到GitHub</title>
    <link href="https://weixingyang.github.io/2018/12/01/Linux%E9%85%8D%E7%BD%AESSH-Key%E5%88%B0GitHub/"/>
    <id>https://weixingyang.github.io/2018/12/01/Linux配置SSH-Key到GitHub/</id>
    <published>2018-12-01T06:48:40.000Z</published>
    <updated>2019-11-27T17:37:20.496Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、生成SSH-Key"><a href="#1、生成SSH-Key" class="headerlink" title="1、生成SSH Key"></a>1、生成SSH Key</h4><p><strong>首先检查下本机是否已经安装了SSH，在终端输入ssh即可：</strong></p><p><img src="/WeiXingYang.github.io/images/2743275-d5ee041fc6a3b53e.png" alt></p><p>如果没有安装进行yum安装</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> yum -y install openssh-clients</span><br></pre></td></tr></table></figure><h6 id="接下来就是生成ssh-key了，输入ssh-keygen-t-rsa，然后连续按回车键三次（注意：千万不要输入密码！）。"><a href="#接下来就是生成ssh-key了，输入ssh-keygen-t-rsa，然后连续按回车键三次（注意：千万不要输入密码！）。" class="headerlink" title="接下来就是生成ssh key了，输入ssh-keygen -t rsa，然后连续按回车键三次（注意：千万不要输入密码！）。"></a>接下来就是生成<code>ssh key</code>了，输入<code>ssh-keygen -t rsa</code>，然后连续按回车键三次（注意：千万不要输入密码！）。</h6><p><img src="/WeiXingYang.github.io/images/2743275-7398d3f9f1eef72c.png" alt></p><p><code>id_rsa.pub</code>为公钥，<code>id_rsa</code>为私钥，它们都是隐藏文件。<br>那么如何查看它们的内容呢？只需要继续执行以下两条命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cd .ssh/</span><br><span class="line"><span class="meta">#</span> cat id_rsa.pub</span><br></pre></td></tr></table></figure><p><img src="/WeiXingYang.github.io/images/2743275-2c142d50f896e48b.png" alt></p><h4 id="2、添加SSH-Key到GitHub上"><a href="#2、添加SSH-Key到GitHub上" class="headerlink" title="2、添加SSH Key到GitHub上"></a>2、添加SSH Key到GitHub上</h4><p><img src="/WeiXingYang.github.io/images/2743275-062ea02946eb9af5.png" alt></p><p>接着执行下面操作：</p><p><img src="/WeiXingYang.github.io/images/2743275-d2a6a8697131e8d7.png" alt></p><p>点击New SSH Key按钮后进行Key的填写操作，完成SSH Key的添加。如下图：<br><img src="/WeiXingYang.github.io/images/2743275-1a8f4cd790d9d667.png" alt></p><p><img src="/WeiXingYang.github.io/images/2743275-cdbdf7fd81c8ac11.png" alt><br>添加SSH Key成功之后，继续输入命令进行测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="/WeiXingYang.github.io/images/2743275-5310d1ab738cb79a.png" alt></p><p>出现上图结果则说明添加SSH Key成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、生成SSH-Key&quot;&gt;&lt;a href=&quot;#1、生成SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;1、生成SSH Key&quot;&gt;&lt;/a&gt;1、生成SSH Key&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;首先检查下本机是否已经安装了SSH，在终端输入ssh即可：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/WeiXingYang.github.io/images/2743275-d5ee041fc6a3b53e.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;如果没有安装进行yum安装&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://weixingyang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 2.0 更新记录</title>
    <link href="https://weixingyang.github.io/2018/08/21/SpringBoot%202.0%20%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/"/>
    <id>https://weixingyang.github.io/2018/08/21/SpringBoot 2.0 更新记录/</id>
    <published>2018-08-21T02:43:00.000Z</published>
    <updated>2019-11-14T17:26:26.040Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、Spring-Boot-2-0-要求Java-版本必须8以上"><a href="#1、Spring-Boot-2-0-要求Java-版本必须8以上" class="headerlink" title="1、Spring Boot 2.0 要求Java 版本必须8以上"></a>1、Spring Boot 2.0 要求Java 版本必须8以上</h4><h4 id="2、配置属性的重定位"><a href="#2、配置属性的重定位" class="headerlink" title="2、配置属性的重定位"></a>2、配置属性的重定位</h4><table><thead><tr><th>Old property</th><th>New property</th></tr></thead><tbody><tr><td>server.context-path</td><td>server.servlet.context-path</td></tr><tr><td>server.context-parameters.*</td><td>server.servlet.context-parameters.*</td></tr><tr><td>server.jsp.class-name</td><td>server.servlet.jsp.class-name</td></tr><tr><td>server.jsp.init-parameters.*</td><td>server.servlet.jsp.init-parameters.*</td></tr><tr><td>server.jsp.registered</td><td>server.servlet.jsp.registered</td></tr><tr><td>server.servlet-path</td><td>server.servlet.path</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      SpringBoot 2.0 更新记录
    
    </summary>
    
    
      <category term="Java" scheme="https://weixingyang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux下更改MySQL的存储目录</title>
    <link href="https://weixingyang.github.io/2018/08/06/Linux%E4%B8%8B%E6%9B%B4%E6%94%B9MySQL%E7%9A%84%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/"/>
    <id>https://weixingyang.github.io/2018/08/06/Linux下更改MySQL的存储目录/</id>
    <published>2018-08-06T09:06:00.000Z</published>
    <updated>2019-11-14T17:26:26.034Z</updated>
    
    <content type="html"><![CDATA[<h5 id="重要步骤：一定要先停止Mysql"><a href="#重要步骤：一定要先停止Mysql" class="headerlink" title="重要步骤：一定要先停止Mysql"></a>重要步骤：一定要先停止Mysql</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> service mysqld stop</span><br></pre></td></tr></table></figure><h5 id="1、创建目标文件夹"><a href="#1、创建目标文件夹" class="headerlink" title="1、创建目标文件夹"></a>1、创建目标文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> mkdir -p /data/mysql</span><br><span class="line"><span class="meta">#</span> chown -R mysql.mysql /data/mysql/</span><br></pre></td></tr></table></figure><h5 id="2、迁移命令"><a href="#2、迁移命令" class="headerlink" title="2、迁移命令"></a>2、迁移命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> mysql_install_db --user=mysql --basedir=/usr --datadir=/data/mysql</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="3、为避免麻烦，删掉原文件夹-var-lib-mysql"><a href="#3、为避免麻烦，删掉原文件夹-var-lib-mysql" class="headerlink" title="3、为避免麻烦，删掉原文件夹/var/lib/mysql"></a>3、为避免麻烦，删掉原文件夹/var/lib/mysql</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> rm -rf /var/lib/mysql/*</span><br></pre></td></tr></table></figure><h5 id="4、修改-etc-my-cnf配置文件"><a href="#4、修改-etc-my-cnf配置文件" class="headerlink" title="4、修改/etc/my.cnf配置文件"></a>4、修改/etc/my.cnf配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/data/mysql</span><br></pre></td></tr></table></figure><h5 id="5、启动mysql"><a href="#5、启动mysql" class="headerlink" title="5、启动mysql"></a>5、启动mysql</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> chkconfig mysqld on</span><br><span class="line"><span class="meta">#</span> service mysqld restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux下更改MySQL的存储目录
    
    </summary>
    
    
      <category term="Linux" scheme="https://weixingyang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot设置默认首页</title>
    <link href="https://weixingyang.github.io/2018/04/26/SpringBoot%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E9%A6%96%E9%A1%B5/"/>
    <id>https://weixingyang.github.io/2018/04/26/SpringBoot设置默认首页/</id>
    <published>2018-04-26T07:49:00.000Z</published>
    <updated>2019-11-14T17:26:26.042Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultView</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.addViewControllers(registry);</span><br><span class="line"><span class="comment">//主页</span></span><br><span class="line">registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"forward:/index"</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      SpringBoot设置默认首页
    
    </summary>
    
    
      <category term="Java" scheme="https://weixingyang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>关于npm install失败的解决方法</title>
    <link href="https://weixingyang.github.io/2018/04/20/%E5%85%B3%E4%BA%8Enpm%20install%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://weixingyang.github.io/2018/04/20/关于npm install失败的解决方法/</id>
    <published>2018-04-20T08:30:00.000Z</published>
    <updated>2019-11-27T17:11:37.491Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>可以尝试以下解决方案</strong></p></blockquote><h4 id="1-授权执行"><a href="#1-授权执行" class="headerlink" title="1.授权执行"></a>1.授权执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install</span><br></pre></td></tr></table></figure><h4 id="2-运行高权限用户"><a href="#2-运行高权限用户" class="headerlink" title="2.运行高权限用户"></a>2.运行高权限用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install --unsafe-perm</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="3-安装某个模块"><a href="#3-安装某个模块" class="headerlink" title="3.安装某个模块"></a>3.安装某个模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm i 模块名 --unsafe-perms</span><br></pre></td></tr></table></figure><h4 id="4-清除代理"><a href="#4-清除代理" class="headerlink" title="4.清除代理"></a>4.清除代理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="5-清除缓存"><a href="#5-清除缓存" class="headerlink" title="5.清除缓存"></a>5.清除缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      关于npm install失败的解决方法
    
    </summary>
    
    
      <category term="日记本" scheme="https://weixingyang.github.io/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>vi/vim 粘贴内容时,保留原文件内容格式</title>
    <link href="https://weixingyang.github.io/2018/04/20/vi%E6%88%96vim%E7%B2%98%E8%B4%B4%E5%86%85%E5%AE%B9%E6%97%B6,%E4%BF%9D%E7%95%99%E5%8E%9F%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A0%BC%E5%BC%8F/"/>
    <id>https://weixingyang.github.io/2018/04/20/vi或vim粘贴内容时,保留原文件内容格式/</id>
    <published>2018-04-20T07:50:00.000Z</published>
    <updated>2019-11-27T17:11:46.933Z</updated>
    
    <content type="html"><![CDATA[<p>在vi/vim普通模式下执行<code>:set paste</code>命令，再按 i 插入就会保留原文件格式</p><ul><li><code>:set paste</code> 打开粘贴命令</li><li><code>:set nopaste</code> 关闭命令</li><li><code>:h paste</code> 帮助</li></ul>]]></content>
    
    <summary type="html">
    
      vi/vim 粘贴内容时,保留原文件内容格式
    
    </summary>
    
    
      <category term="Linux" scheme="https://weixingyang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux或Win下安装node和npm</title>
    <link href="https://weixingyang.github.io/2018/04/20/Linux%E6%88%96Win%E4%B8%8B%E5%AE%89%E8%A3%85node%E5%92%8Cnpm/"/>
    <id>https://weixingyang.github.io/2018/04/20/Linux或Win下安装node和npm/</id>
    <published>2018-04-20T07:31:00.000Z</published>
    <updated>2019-11-27T17:36:50.956Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、离线安装Node"><a href="#一、离线安装Node" class="headerlink" title="一、离线安装Node"></a>一、离线安装Node</h4><blockquote><p>官网下载链接：<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a><br>node和npm对应关系：<a href="https://nodejs.org/zh-cn/download/releases/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/releases/</a></p></blockquote><p><img src="/WeiXingYang.github.io/images/2743275-497a8e6f4e7c11d2.png" alt></p><a id="more"></a><p><strong>解压目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cd /usr/local</span><br><span class="line"><span class="meta">#</span> yum install -y xz</span><br><span class="line"><span class="meta">#</span> xz -d node-v8.11.1-linux-x64.tar.xz</span><br><span class="line"><span class="meta">#</span> tar -xf node-v8.11.1-linux-x64.tar</span><br></pre></td></tr></table></figure><p>这里想要全局使用<code>npm</code> 和 <code>node</code>,就需要做相关软链，如下！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cd /usr/local/bin</span><br><span class="line"><span class="meta">#</span> ln -s /usr/local/src/node-v8.10.0-linux-x64/bin/npm</span><br><span class="line"><span class="meta">#</span> ln -s /usr/local/src/node-v8.10.0-linux-x64/bin/node</span><br></pre></td></tr></table></figure><p>然后即可在任意位置执行 <code>node  -v</code>   <code>npm  -v</code>  查看相应的版本，则安装完成！</p><h4 id="二、yum安装node和npm-Linux快速安装"><a href="#二、yum安装node和npm-Linux快速安装" class="headerlink" title="二、yum安装node和npm(Linux快速安装)"></a>二、yum安装node和npm<code>(Linux快速安装)</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> yum install epel-release -y</span><br><span class="line"><span class="meta">#</span> yum install nodejs -y</span><br></pre></td></tr></table></figure><h4 id="三、使用淘宝镜像站-建议跳过此步骤，不建议使用"><a href="#三、使用淘宝镜像站-建议跳过此步骤，不建议使用" class="headerlink" title="三、使用淘宝镜像站(建议跳过此步骤，不建议使用)"></a>三、使用淘宝镜像站<code>(建议跳过此步骤，不建议使用)</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> npm config get registry // https://registry.npmjs.org/</span><br><span class="line"><span class="meta">#</span> npm config set registry https://registry.npm.taobao.org</span><br><span class="line">---- 验证是否配置成功</span><br><span class="line"><span class="meta">#</span> npm config get registry</span><br></pre></td></tr></table></figure><h4 id="四、指定全局安装路径和缓存路径-看自己选择是否使用"><a href="#四、指定全局安装路径和缓存路径-看自己选择是否使用" class="headerlink" title="四、指定全局安装路径和缓存路径(看自己选择是否使用)"></a>四、指定全局安装路径和缓存路径<code>(看自己选择是否使用)</code></h4><blockquote><p>设置全局模块的安装路径到 <code>node_global</code> 文件夹，<br>设置缓存到 <code>node_cache</code> 文件夹</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> npm config set prefix D:\nodejs\node_global</span><br><span class="line"><span class="meta">#</span> npm config set cache D:\nodejs\node_cache</span><br><span class="line">---- 验证是否配置成功</span><br><span class="line"><span class="meta">#</span> npm config get cache</span><br><span class="line"><span class="meta">#</span> npm ls -g</span><br></pre></td></tr></table></figure><h4 id="五、安装-cnpm-看自己选择是否使用"><a href="#五、安装-cnpm-看自己选择是否使用" class="headerlink" title="五、安装 cnpm(看自己选择是否使用)"></a>五、安装 cnpm<code>(看自己选择是否使用)</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span> cnpm -v</span><br></pre></td></tr></table></figure><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h4><ol><li><strong>npm默认的全局目录可执行命令查看</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> npm config ls</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      Linux或Win下安装node和npm
    
    </summary>
    
    
      <category term="Linux" scheme="https://weixingyang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装Git</title>
    <link href="https://weixingyang.github.io/2018/04/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Git/"/>
    <id>https://weixingyang.github.io/2018/04/17/Linux下安装Git/</id>
    <published>2018-04-17T05:41:00.000Z</published>
    <updated>2019-11-24T09:11:42.492Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、使用yum安装"><a href="#1、使用yum安装" class="headerlink" title="1、使用yum安装"></a>1、使用yum安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> yum -y install git</span><br><span class="line"><span class="meta">#</span> yum remove git</span><br></pre></td></tr></table></figure><h4 id="2、源代码安装"><a href="#2、源代码安装" class="headerlink" title="2、源代码安装"></a>2、源代码安装</h4><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---安装依赖的包</span><br><span class="line"><span class="meta">#</span> yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker zlib</span><br><span class="line"><span class="meta">#</span> cd /usr/local</span><br><span class="line">----下载git源码</span><br><span class="line"><span class="meta">#</span> wget https://github.com/git/git/archive/v2.21.0.tar.gz</span><br><span class="line">----解压git源码</span><br><span class="line"><span class="meta">#</span> tar -zxvf v2.21.0.tar.gz</span><br><span class="line"><span class="meta">#</span> cd git-2.21.0/</span><br><span class="line"><span class="meta">#</span> mkdir /usr/local/git</span><br><span class="line">----编译安装到指定目录</span><br><span class="line"><span class="meta">#</span> make prefix=/usr/local/git all</span><br><span class="line"><span class="meta">#</span> sudo make prefix=/usr/local/git install</span><br><span class="line"><span class="meta">#</span> vim /etc/profile</span><br><span class="line">----添加在文件的最后一行</span><br><span class="line">export PATH=/usr/local/git/bin:$PATH</span><br><span class="line"><span class="meta">#</span> source /etc/profile</span><br><span class="line"><span class="meta">#</span> git --version</span><br></pre></td></tr></table></figure><h4 id="3、FAQ"><a href="#3、FAQ" class="headerlink" title="3、FAQ"></a>3、FAQ</h4><h6 id="1、-如果解压时出现报错，建议手动下载git源码包然后上传到服务器"><a href="#1、-如果解压时出现报错，建议手动下载git源码包然后上传到服务器" class="headerlink" title="1、 如果解压时出现报错，建议手动下载git源码包然后上传到服务器"></a>1、 如果解压时出现报错，建议手动下载git源码包然后上传到服务器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gzip: stdin: unexpected end of file</span><br><span class="line">tar: Unexpected EOF in archive</span><br><span class="line">tar: Unexpected EOF in archive</span><br><span class="line">tar: Error is not recoverable: exiting now</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux下安装Git
    
    </summary>
    
    
      <category term="Linux" scheme="https://weixingyang.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
